@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthStateProvider


<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Eshop Front End</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="browse">
                <span class="oi oi-plus" aria-hidden="true"></span> Browse
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <AuthorizeView>
                <NotAuthorized>
                    <NavLink class="nav-link" href="login">
                        <span class="oi oi-account-login" aria-hidden="true"></span> Login
                    </NavLink>
                </NotAuthorized>
                <Authorized>
                    <NavLink class="nav-link" href="" @onclick="Logout">
                        <span class="oi oi-account-logout" aria-hidden="true"></span> Logout
                    </NavLink>
                </Authorized>
            </AuthorizeView>
        </div>
        <div class="nav-item px-3">
            <AuthorizeView>
                <NotAuthorized>
                    <NavLink class="nav-link" href="manageaccounts">
                        <span class="oi oi-list-rich" aria-hidden="true"></span> Manage Accounts
                    </NavLink>
                </NotAuthorized>
                <Authorized>
                    <NavLink class="nav-link" href="manageaccounts">
                        <span class="oi oi-list-rich" aria-hidden="true"></span> Manage Accounts
                    </NavLink>
                </Authorized>
            </AuthorizeView>
        </div>
        <div class="nav-item px-3">
            <AuthorizeView>
                <NotAuthorized>
                    <NavLink class="nav-link" href="manageproducts">
                        <span class="oi oi-list-rich" aria-hidden="true"></span> Manage Products
                    </NavLink>
                </NotAuthorized>
                <Authorized>
                    <NavLink class="nav-link" href="manageproducts">
                        <span class="oi oi-list-rich" aria-hidden="true"></span> Manage Products
                    </NavLink>
                </Authorized>
            </AuthorizeView>
        </div>
        <div class="nav-item px-3">
            <AuthorizeView>
                <NotAuthorized>
                    <NavLink class="nav-link" href="basket">
                        <span class="oi oi-list-rich" aria-hidden="true"></span> View Cart
                    </NavLink>
                </NotAuthorized>
                <Authorized>
                    <NavLink class="nav-link" href="basket">
                        <span class="oi oi-list-rich" aria-hidden="true"></span> View Cart
                    </NavLink>
                </Authorized>
            </AuthorizeView>
        </div>
        <div class="nav-item px-3">
            <AuthorizeView>
                <Authorized>
                    <NavLink class="nav-link" href="orders">
                        <span class="oi oi-list-rich" aria-hidden="true"></span> View Past Orders
                    </NavLink>
                </Authorized>
            </AuthorizeView>
        </div>
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private async void Logout() { 
        
        LocalStorage.RemoveItemAsync("username");
        await AuthStateProvider.GetAuthenticationStateAsync();
     
    }
}
